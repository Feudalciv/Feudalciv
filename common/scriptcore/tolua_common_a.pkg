/*****************************************************************************
 Freeciv - Copyright (C) 2005 - The Freeciv Project
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
*****************************************************************************/

/*****************************************************************************
  ADVERTISEMENT: do not attempt to change the name of the API functions.
  They *must* be compatible between the minor Freeciv versions within the
  same major version. If you really like to change a function name, be sure
  to keep also the old one running.
*****************************************************************************/

$#ifdef HAVE_CONFIG_H
$#include <fc_config.h>
$#endif

/* common/scriptcore */
$#include "api_common_intl.h"
$#include "api_common_utilities.h"
$#include "luascript.h"
$#include "luascript_types.h"

/* Classes. */
struct Nonexistent {
};

$[

-- Nonexistent methods.
function Nonexistent:exists()
  return false
end

$]

/* Intl module. */
const char *api_intl__
  @ _ (lua_State *L, const char *untranslated);
const char *api_intl_N_
  @ N_ (lua_State *L, const char *untranslated);
const char *api_intl_Q_
  @ Q_ (lua_State *L, const char *untranslated);
const char *api_intl_PL_
  @ PL_ (lua_State *L, const char *singular, const char *plural, int n);

/* Log module. */
module log {
  module level {
    enum log_level {
      LOG_FATAL @ FATAL,
      LOG_ERROR @ ERROR,
      LOG_NORMAL @ NORMAL,
      LOG_VERBOSE @ VERBOSE,
      LOG_DEBUG @ DEBUG
    };
  }

  void api_utilities_log_base
    @ base (lua_State *L, int log_level, const char *message);
}

$[
-- Log module implementation.

function log.fatal(...)
  log.base(log.level.FATAL, string.format(unpack(arg)))
end

function log.error(...)
  log.base(log.level.ERROR, string.format(unpack(arg)))
end

function log.normal(...)
  log.base(log.level.NORMAL, string.format(unpack(arg)))
end

function log.verbose(...)
  log.base(log.level.VERBOSE, string.format(unpack(arg)))
end

function log.debug(...)
  log.base(log.level.DEBUG, string.format(unpack(arg)))
end

-- ***************************************************************************
-- Old logging functions
-- Deprecated. New logging functions are listed above.
-- ***************************************************************************
function error_log(msg)
  log.error(msg)
end

function debug_log(msg)
  log.debug(msg)
end

$]

/* Utilities module. */
int api_utilities_random
  @ random (lua_State *L, int min, int max);

$[
-- ***************************************************************************
-- Dump the state of user scalar variables to a Lua code string.
-- ***************************************************************************
function _freeciv_state_dump()
  local res = ''

  for k, v in pairs(_G) do
    if k == '_VERSION' then
      -- ignore _VERSION variable.
    elseif type(v) == 'boolean'
        or type(v) == 'number' then
      local rvalue = tostring(v)

      res = res .. k .. '=' .. rvalue .. '\n'
    elseif type(v) == 'string' then
      local rvalue = string.format('%q', v)

      res = res .. k .. '=' .. rvalue .. '\n'
    elseif type(v) == 'userdata' then
      local method = string.lower(tolua.type(v))

      res = res .. k .. '=find.' .. method
      if method == 'city' or method == 'unit' then
        res = res .. '(nil,' .. v.id .. ')'
      elseif v.id then
        res = res .. '(' .. v.id .. ')'
      else
        res = res .. '()'
      end
      res = res .. '\n'
    end
  end

  return res
end

$]
