----------------------------------------------------------------------
Freeciv Graphics, and Tile Specification Files
----------------------------------------------------------------------

Using Graphics:
---------------

To use different graphics with Freeciv, use the '--tiles' argument to
the Freeciv client.  Eg, to use the 'engels' graphics, start the
client as:
  
    civclient --tiles engels

What Freeciv actually does in this case is look for a file called
'engels.tilespec' somewhere in your Freeciv data path.  (See the file
INSTALL for some information on the Freeciv data path.)  That tilespec
file contains information telling Freeciv which graphics files to use,
and what those graphics files contain.

That is all you need to know to use alternative graphics provided by
Freeciv or by third-party add-ons.  The rest of this file describes
(though not fully) the contents of the tilespec file and related
files.  This is intended as developer reference, and for people
wanting to create/compile alternative tilesets and modpacks for
Freeciv.

----------------------------------------------------------------------
Overview:
---------

The purpose of the 'tilespec' file and related 'spec' files is to
allow the detailed layout of the graphics within the files to be
flexible and not hard-coded into Freeciv, and to allow add-ons to
conveniently provide additional graphics.

There are two layers to the tilespec files:

The top-level file is named, eg: 'trident.tilespec'.  The basename of
this file (here, 'trident') corresponds to the parameter of the
'--tiles' command-line argument for the Freeciv client, as described
above.

The top-level tilespec file contains general information on the full
tileset, and a list of files which specify information about the
individual graphics files.  These filenames must be located somewhere
in the data path, though not necessarily the same place as the
top-level tilespec file.  Note that with this system the number and
contents of the referenced files are completely flexible at this
level.

An exception is that the intro graphics must be in individual files,
as listed in the tilespec file, because Freeciv treats these
specially: these graphics are freed after the game starts, and
reloaded later as necessary.

----------------------------------------------------------------------
Tileset options:
----------------

In the top-level tilespec file you can set options for the tileset.
Each of these should go within the [tilespec] section. Currently
options include:

  Strings (enclosed in "")
  ------------------------
  options               : A capability string, currently "+tilespec2"
  name                  : the name of the tileset
  city_names_font       : an X font string
  city_productions_font : an X font string
  main_intro_file       : GFX file for the intro graphics
  minimap_intro_file    : GFX file for the radar screen intro graphics

  Integers
  --------
  normal_tile_width     : the width of terrain tiles
  normal_tile_height    : the height of terrain tiles
  small_tile_width      : the width of icon sprites
  small_tile_height     : the height of icon sprites

  Booleans (0 or 1)
  -----------------
  is_isometric          : set to 1 for an iso-view tileset
  is_mountainous        : do hills and mountains blend together?

  String lists (a comma-separated list of strings)
  ------------------------------------------------
  files                 : A list of .spec files to scan for sprites.
                          See "individual spec files", below.

----------------------------------------------------------------------
Individual spec files:
----------------------

Each spec file describes one graphics file (PNG format is standard,
although some clients may accept other formats as well) as specified in
the spec file.  The graphics file must be in the Freeciv data path, but
not necessarily in the same location as the spec file.  Note you can have
multiple spec files using a single graphics file in different ways.

The main data described in the spec file is in sections named
[grid_*], where * is some arbitrary tag (but unique within each file).
A grid corresponds to a regular rectangular array of tiles.  In
general one may have multiple grids in one file, but the default
tilesets usually only have one per file.  (Multiple grids would be
useful to have different size tiles in the same file.)  Each grid
defines an origin (top left) and spacing, both in terms of pixels, and
then refers to individual tiles of the grid by row and column.  The
origin, and rows and columns, are counted as (0,0) = top left.

Each individual tile is given a "tag", which is a string which is
referenced in the code and/or from ruleset files.  A grid may be
sparse, with some elements unused (simply don't mention their row and
column), and a single tile may have multiple tags (eg, to use the same
graphic for multiple purposes in the game): just specify a list of
comma-separated strings.

If a given tag appears multiple times in the spec files, the *last*
such tag is used.  (That is, in the order of files listed in the
tilespec file, and order within each file.)  This allows selected
graphics to be "overridden" by listing a replacement spec file near
the end of the 'files' list in the toplevel tilespec file, without
having to modify earlier files in the list.

----------------------------------------------------------------------
Tag prefixes:
-------------

To help keep the tags organised, there is a rough prefix system used 
for standard tags:

  f.	      national flags
  r.	      road/rail
  s.	      general "small"
  u.	      unit images
  t.	      basic terrain types (with _n0s0e0w0 to _n1s1e1w1)
  ts.	      terrain special resources
  tx.	      extra terrain-related
  gov.	      government types
  unit.	      unit overlays: hp, stack, activities (goto, fortify etc)
  upkeep.     unit upkeep and unhappiness
  city.	      city related (city, size, sq.-prod., disorder, occupied)
  cd.	      city defaults
  citizen.    citizens, including specialists
  explode.    explosion graphics (nuke, units)
  spaceship.  spaceship components
  treaty.     treaty thumbs
  user.	      crosshairs (in general: user interface?)

In general, graphics tags hard-wired into Freeciv _must_ be provided
by the spec files, or the client will refuse to start.  Graphics tags
provided by ruleset files (at least for the "standard" rulesets)
should also be provided, but generally the client will continue even
if they are not, though the results may not be satisfactory for the
user.  To work properly tags should correspond to appropriately sized
graphics.  (The basic size may vary, as specified in the top-level
tilespec file, but the individual tiles should be consistent with
those sizes and/or the usage of those graphics.)
  
----------------------------------------------------------------------

Information on certain tags:

  citizen.*

    This provides citizen graphics.  The types of citizen are happy,
    content, unhappy, angry, entertainer, scientist, and
    tax_collector. The name of the citizen forms the postfix for the
    tag name; for instance "citizen.entertainer" should be the Elvis
    sprite.  More than one sprite can be provide for the citizen type
    by appending a number; for instance "citizen.happy_0" and
    "citizen.happy_1" will provide two citizen sprites.  There is a
    hard-coded limit (currently 6) on the number of different sprites
    a citizen may have.

    Currently the citizen sprites may not have any transparency, as
    this is ignored in much of the drawing.  This is considered a bug.

  farmland/irrigation:

    tx.farmland and tx.irrigation provide the basic sprites for farmland
    and irrigation.  Additionally, there is support for drawing continuous
    farmland and irrigation (as is used in Civ3).  Here there are 16
    irrigation sprites (and the same for farmland), starting with
    tx.s_irrigation_n0s0e0w0 and running through tx.s_irrigation_n1s1e1w1.
    An appropriate sprite will be chosen depending on which adjacent tiles
    also have farmland/irrigation.  If any of these sprites are not present,
    the default sprite will be used as a fallback.

----------------------------------------------------------------------
